// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eTradeWithOnionArchitecture.Infrastructure.Persistence.DBContext;

#nullable disable

namespace eTradeWithOnionArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250623175745_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c18be9c0-aa65-4af8-bd17-002000200003",
                            ConcurrencyStamp = "94caea0f-0a33-493a-bdd7-cb93ed4aa548",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "d18be9c0-aa65-4af8-bd17-002000200004",
                            ConcurrencyStamp = "54b5a2c1-9ba2-40d1-b9fe-810a2ed5c756",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "f18be9c0-aa65-4af8-bd17-002000200006",
                            ConcurrencyStamp = "7265e88c-2283-4152-886d-aa31b856b02b",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "a18be9c0-aa65-4af8-bd17-002000200001",
                            RoleId = "c18be9c0-aa65-4af8-bd17-002000200003"
                        },
                        new
                        {
                            UserId = "b18be9c0-aa65-4af8-bd17-002000200002",
                            RoleId = "d18be9c0-aa65-4af8-bd17-002000200004"
                        },
                        new
                        {
                            UserId = "e18be9c0-aa65-4af8-bd17-002000200005",
                            RoleId = "f18be9c0-aa65-4af8-bd17-002000200006"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("eTradeWithOnionArchitecture.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Fullname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a18be9c0-aa65-4af8-bd17-002000200001",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "984c1718-b73a-445c-89f5-c88618cf5e06",
                            Email = "admin@etrade.com",
                            EmailConfirmed = true,
                            Fullname = "Admin User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ETRADE.COM",
                            NormalizedUserName = "ADMIN@ETRADE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOMBDpVGCa//ddwv1SO+sN2n97S4GYn5NVnjAXsXaoHB9CzvYdKhIYD8l2+3UVJXmQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67454eed-b055-439b-b973-83590a207906",
                            TwoFactorEnabled = false,
                            UserName = "admin@etrade.com"
                        },
                        new
                        {
                            Id = "b18be9c0-aa65-4af8-bd17-002000200002",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b134bf4f-310e-4148-b933-3e2c04fdc08b",
                            Email = "user@etrade.com",
                            EmailConfirmed = true,
                            Fullname = "Regular User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@ETRADE.COM",
                            NormalizedUserName = "USER@ETRADE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOFNvbGikyon5zUvCaJR3iAhYNgMoRbFSyBm7dYfVQbPS2O2vnclIFZDycPY26/z6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e16e8d36-9bc8-4f74-9c54-5356127d07da",
                            TwoFactorEnabled = false,
                            UserName = "user@etrade.com"
                        },
                        new
                        {
                            Id = "e18be9c0-aa65-4af8-bd17-002000200005",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0db92a9f-945f-449a-b053-57ce2cff9aed",
                            Email = "editor@etrade.com",
                            EmailConfirmed = true,
                            Fullname = "Editor Contributor",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITOR@ETRADE.COM",
                            NormalizedUserName = "EDITOR@ETRADE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFdvZTRRLq7yZEKN5wM3Uxb0s6CHdZWRnhskyTmKnErudn4S2NX9RnMMBI3T4XHGjw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "864827b6-0f29-42a6-8dcc-81cfafa7dfdb",
                            TwoFactorEnabled = false,
                            UserName = "editor@etrade.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("eTradeWithOnionArchitecture.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("eTradeWithOnionArchitecture.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eTradeWithOnionArchitecture.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("eTradeWithOnionArchitecture.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
